RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=FALSE, localImp=FALSE,
proximity=TRUE)
print(RanFor2)
bbb <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=T, localImp=FALSE,
proximity=TRUE)
print(RanFor2)
bbb <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=T, localImp=T,
proximity=TRUE)
print(RanFor2)
bbb <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=F, localImp=T,
proximity=TRUE)
print(RanFor2)
bbb <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
View(train_smote)
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53"))
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53"))
View(new_train_smote)
View(aaa)
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53" testcik
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53"                   testcik 78,25
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24" testcik 79,64
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x4","x12","x24"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x4","x12"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24" testcik 79,64
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x4","x24"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24" testcik 79,64
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12","x24"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12","x17"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24","x12"   testcik 79,94
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12","x51"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24","x12"   testcik 79,94
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12","x35"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53"                           testcik 78,25
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24"         testcik 79,64
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24","x12"   testcik 79,94
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
## RandomForest 3 -"x2","x40","x41","x53"                           testcik 78,25
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24"         testcik 79,64
## RandomForest 3 -"x2","x40","x41","x53","x44","x20","x24","x12"   testcik 79,94
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x12"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
view(meandecgini3)
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x37"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x57"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x2","x40","x41","x53","x44","x20","x24","x59"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
set.seed(20)
RanFor1 <- randomForest(y ~ ., data = train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini1 <- round(importance(RanFor1), 2)
varImpPlot(RanFor1)
pred_RanFor1 <- predict(RanFor1, newdata=X_test)
cm_RanFor1_test <- confusionMatrix(factor(pred_RanFor1), test$y)
print(cm_RanFor1_test[["byClass"]][["Balanced Accuracy"]])
view(meandecgini1)
set.seed(20)
RanFor1 <- randomForest(y ~ ., data = train_smote, importance=T, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini1 <- round(importance(RanFor1), 2)
varImpPlot(RanFor1)
pred_RanFor1 <- predict(RanFor1, newdata=X_test)
cm_RanFor1_test <- confusionMatrix(factor(pred_RanFor1), test$y)
print(cm_RanFor1_test[["byClass"]][["Balanced Accuracy"]])
set.seed(20)
RanFor1 <- randomForest(y ~ ., data = train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini1 <- round(importance(RanFor1), 2)
varImpPlot(RanFor1)
pred_RanFor1 <- predict(RanFor1, newdata=X_test)
cm_RanFor1_test <- confusionMatrix(factor(pred_RanFor1), test$y)
print(cm_RanFor1_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x37",))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57",))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
view(meandecgini3)
new_train_smote <- train_smote %>% select(-c("x57","x37"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x59"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x46"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x26"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x30"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x43"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x13"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_train_smote <- train_smote %>% select(-c("x57","x21"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=F, localImp=T,
proximity=TRUE)
print(RanFor2)
meandecgini2 <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
View(RanFor2)
view(RanFor2[["importance"]])
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = train_raw, importance=F, localImp=F
,
proximity=TRUE)
new_train_smote3 <- train_smote %>% select(-c("x57"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote3, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
set.seed(20)
RanFor1 <- randomForest(y ~ ., data = train_smote, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini1 <- round(importance(RanFor1), 2)
varImpPlot(RanFor1)
pred_RanFor1 <- predict(RanFor1, newdata=X_test)
cm_RanFor1_test <- confusionMatrix(factor(pred_RanFor1), test$y)
print(cm_RanFor1_test[["byClass"]][["Balanced Accuracy"]])
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor2)
meandecgini2 <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=T, localImp=F
,
proximity=TRUE)
print(RanFor2)
meandecgini2 <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57","x21"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=T, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
set.seed(20)
RanFor2 <- randomForest(y ~ ., data = final_train_smote, importance=T, localImp=F
,
proximity=TRUE)
print(RanFor2)
meandecgini2 <- round(importance(RanFor2), 2)
varImpPlot(RanFor2)
new_train_smote3 <- train_smote %>% select(-c("x57"))
set.seed(20)
RanFor3 <- randomForest(y ~ ., data = new_train_smote3, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
print(RanFor1)
meandecgini3 <- round(importance(RanFor3), 2)
varImpPlot(RanFor3)
pred_RanFor3 <- predict(RanFor3, newdata=X_test)
cm_RanFor3_test <- confusionMatrix(factor(pred_RanFor3), test$y)
print(cm_RanFor3_test[["byClass"]][["Balanced Accuracy"]])
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=T, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
pred_RanFor4 <- predict(RanFor4, newdata=X_test_submission)
new_final_train_smote4 <- final_train_smote %>% select(-c("x57"))
set.seed(20)
RanFor4 <- randomForest(y ~ ., data = new_final_train_smote4, importance=F, localImp=F
,
proximity=TRUE)
print(RanFor4)
meandecgini4 <- round(importance(RanFor4), 2)
varImpPlot(RanFor4)
new_X_test_submission4 <- X_test_submission %>% select(-c("x57"))
pred_RanFor4 <- predict(RanFor4, newdata=X_test_submission)
new_X_test_submission4 <- X_test_submission %>% select(-c("x57"))
pred_RanFor4 <- predict(RanFor4, newdata=new_X_test_submission4)
glimpse(X_test)
glimpse(new_X_test_submission4)
glimpse(new_train_smote3)
new_X_test_submission4 <- X_test_submission %>% select(-c("x57"))
pred_RanFor4 <- predict(RanFor4, newdata=new_X_test_submission4)
RanFor3 <- randomForest(y ~ ., data = new_train_smote3, importance=F, localImp=F, nPerm=10 ,
proximity=TRUE)
pred_RanFor4 <- predict(RanFor3, newdata=new_X_test_submission4)
View(RanFor4)
View(X_test_submission)
levels(X_test_submission)
levels(X_test_submission$x56)
view(meandecgini4)
skim(new_X_test_submission4)
install.packages("skimr")
skim(new_X_test_submission4)
library(skimr)
skim(new_X_test_submission4)
X_test_submission <- test_raw %>% select(-x50, -x52, -y)
new_X_test_submission4 <- X_test_submission %>% select(-c("x57"))
pred_RanFor4 <- predict(RanFor4, newdata=new_X_test_submission4)
pred_RanFor4 <- predict(RanFor4, newdata= as.matrix(new_X_test_submission4)
pred_RanFor4 <- predict(RanFor4, newdata= as.matrix(new_X_test_submission4))
pred_RanFor4 <- predict(RanFor4, newdata=as.matrix(new_X_test_submission4))
pred_RanFor4 <- predict(RanFor4, newdata=as.data.frame(new_X_test_submission4))
pred_RanFor4 <- predict(RanFor4, newdata=new_X_test_submission4)
pred_RanFor4 <- predict(RanFor4, newdata=new_final_train_smote4)
skim(new_final_train_smote4)
glimpse(new_final_train_smote4)
a <- new_final_train_smote4 %>% select(-y)
pred_RanFor4 <- predict(RanFor4, newdata=a)
view(new_final_train_smote4)
view(X_test_submission)
view(new_final_train_smote4)
view(X_test)
glimpse(X_test)
glimpse(X_test_submission)
X_test_submission <- test_raw %>% select(-x50, -x52, -y)
X_test_cts_scaled <-X_test_submission %>% select(cts_features) %>% scale()
X_test_submission_categorical <- X_test_submission %>% select(categorical_features)
X_test_submission_categorical <- lapply(X_test_submission_categorical, factor)
X_test_submission <- cbind(as.data.table(X_test_cts_scaled), as.data.table(X_test_submission_categorical))
glimpse(X_test_submission )
pred_RanFor4 <- predict(RanFor4, newdata=X_test_submission)
new_X_test_submission4 <- X_test_submission %>% select(-c("x57"))
pred_RanFor4 <- predict(RanFor4, newdata=new_X_test_submission4)
pred_RanFor4 <- predict(RanFor4, newdata=X_test_submission)
glimpse(X_test_submission)
pred_RanFor4 <- predict(RanFor4, newdata=X_test)
X_test_submission
pred_RanFor4 <- predict(RanFor4, newdata=X_test_submission)
install.packages(c("mlr", "ROSE", "TunePareto"))
library(dplyr)
View(train_raw)
filter(train_raw, y==a)
train_raw %>% y == a
install.packages("smotefamily")
>>>>>>> Stashed changes
